-'21 ;+#%bench '! 2 '!3 ##run'"< <  0;+#(__return -'"+#$null+#$null  ' /;+#+parserScope  .+#)__makeMap#)fromPairs'!.+#*__makeList##run'H.+#*__makeList##run'"*##Any+##Any.+#*__makeList##run'"*#$Bool+#$Bool.+#*__makeList##run'"*#%Bytes+#%Bytes.+#*__makeList##run'"*#$Char+#$Char.+#*__makeList##run'"*#*DeepFrozen+#*DeepFrozen.+#*__makeList##run'"*#&Double+#&Double.+#*__makeList##run'"*#%Empty+#%Empty.+#*__makeList##run'"*##Int+##Int.+#*__makeList##run'"*#$List+#$List.+#*__makeList##run'"*##Map+##Map.+#*__makeList##run'"*#&NullOk+#&NullOk.+#*__makeList##run'"*#$Same+#$Same.+#*__makeList##run'"*##Set+##Set.+#*__makeList##run'"*##Str+##Str.+#*__makeList##run'"*#-SubrangeGuard+#-SubrangeGuard.+#*__makeList##run'"*#$Void+#$Void.+#*__makeList##run'"*#)_mapEmpty+#)_mapEmpty.+#*__makeList##run'"*#+_mapExtract+#+_mapExtract.+#*__makeList##run'"*#/_accumulateList+#/_accumulateList.+#*__makeList##run'"*#._accumulateMap+#._accumulateMap.+#*__makeList##run'"*#,_booleanFlow+#,_booleanFlow.+#*__makeList##run'"*#*_iterWhile+#*_iterWhile.+#*__makeList##run'"*#,_validateFor+#,_validateFor.+#*__makeList##run'"*#-_switchFailed+#-_switchFailed.+#*__makeList##run'"*#._makeVerbFacet+#._makeVerbFacet.+#*__makeList##run'"*#)_comparer+#)_comparer.+#*__makeList##run'"*#)_suchThat+#)_suchThat.+#*__makeList##run'"*#*_matchSame+#*_matchSame.+#*__makeList##run'"*#%_bind+#%_bind.+#*__makeList##run'"*#-_quasiMatcher+#-_quasiMatcher.+#*__makeList##run'"*#!M+#!M.+#*__makeList##run'"*#&import+#&import.+#*__makeList##run'"*#%throw+#%throw.+#*__makeList##run'"*#*typhonEval+#*typhonEval.+#*__makeList##run'"*#.b__quasiParser+#.b__quasiParser.+#*__makeList##run'"*#3simple__quasiParser+#3simple__quasiParser.+#*__makeList##run'"*#1term__quasiParser+#1term__quasiParser.+#*__makeList##run'"*#1_makeOrderedSpace+#1_makeOrderedSpace.+#*__makeList##run'"*#%bench+#%bench.+#*__makeList##run'"*#*astBuilder+#*astBuilder/?.+#+_mapExtract##run'!*#/makeMonteParser>'";+#/makeMonteParser <   .+#&import##run'"*#1lib/parsers/monte+#+parserScope/?.+#+_mapExtract##run'!*#.makeMonteLexer>'";+#.makeMonteLexer <   .+#&import##run'"*#5lib/monte/monte_lexer+#+parserScope/?.+#+_mapExtract##run'!*#/parseExpression>'";+#/parseExpression <   .+#&import##run'"*#6lib/monte/monte_parser+#+parserScope/?.+#+_mapExtract##run'!*#+makeLexerQP>'";+#+makeLexerQP <   .+#&import##run'"*#*prelude/ql+#+parserScope/?.+#+_mapExtract##run'!*#*astBuilder>'";+#*astBuilder <   .+#&import##run'"*#1prelude/monte_ast+#+parserScope/?.+#+_mapExtract##run'!*#&expand>'";+#&expand <   .+#&import##run'"*#8lib/monte/monte_expander+#+parserScope/?.+#+_mapExtract##run'!*#(optimize>'";+#(optimize <   .+#&import##run'"*#9lib/monte/monte_optimizer+#+parserScope1 ;+#+makeFakeLex '! 2 '!3 ##run'!;+#&tokens  0;+#(__return -'"-'"/;+#$iter  .+#&tokens#-_makeIterator' .+#(__return##run'!1 ;+#'fakeLex '! 2 '#3 #$next'!;+#"ej  0;+#(__return -'"0;+#)doNotCare .+#(__return##run'!..+#$iter#$next'!+#)doNotCare##get'!*&"< .+#"ej##run'!+#$null+#$null  3 #)valueHole'  0;+#(__return -'".+#(__return##run'!*&t+#$null  3 #+patternHole'  0;+#(__return -'".+#(__return##run'!*&t+#$null  ' +#$null  ' 1 ;+#%makeM '! 2 '!3 ##run'";+##ast ;+#(isKernel+#$Bool 0;+#(__return -'".+#(__return##run'!1#ZAn abstract syntax tree in the Monte programming language.;+#!m '! 2 '$3 #(_printOn'!;+##out  0;+#(__return -'"-'#.+##out#%print'!*#"m`.+##ast#(_printOn'!+##out.+##out#%print'!*#!`+#$null  3 #*substitute'!;+#&values  0;+#(__return -'".+#(__return##run'!+#!m+#$null  3#VDesugar all non-Kernel-Monte syntax into Kernel-Monte.#&expand'  0;+#(__return -'"-'"9+#(isKernel.+#(__return##run'!+#!m 0;+#"ej .+#(__return##run'!.+#%makeM##run'".+#&expand##run'#+##ast+#*astBuilder+#"ej+#$true;+#%error .+#%throw##run'!..+#3simple__quasiParser#*valueMaker'!.+#*__makeList##run'#*#ACouldn't expand to Kernel-Monte: .+#3simple__quasiParser#)valueHole'!*& *# #*substitute'!.+#*__makeList##run'!+#%error+#$null  3#CAggressively optimize Kernel-Monte.##mix'  0;+#(__return -'"-'"9.+#(isKernel##not' .+#%throw##run'!..+#3simple__quasiParser#*valueMaker'!.+#*__makeList##run'!*#=Can't optimize unexpanded AST#*substitute'!.+#*__makeList##run'  .+#(__return##run'!.+#%makeM##run'".+#(optimize##run'!+##ast+#$true+#$null  ' +#$null  ' 1 ;+#&makeQL '! 2 '!3 ##run'!;+#&tokens  0;+#(__return -'"-'"/;+##ast  .+#/parseExpression##run'#.+#+makeFakeLex##run'!+#&tokens+#*astBuilder+#%throw.+#(__return##run'!.+#%makeM##run'"+##ast+#%false+#$null  ' 1 ;+#1makeChunkingLexer '! 2 '!3 ##run'!;+#)inputName  0;+#(__return -'"-'#/=+#%lexer  .+#.makeMonteLexer##run'"*# +#)inputName1 ;+#)makeLexer '! 2 '!3 ##run'  0;+#(__return -'"-'"/=+#&tokens  .+#*__makeList##run' .+#(__return##run'!1 ;+#2chunkingLexerChunk '! 2 '$3 #(feedMany'!;+#%chunk  0;+#(__return -'"-'"5+#%lexer.+#%lexer#1lexerForNextChunk'!+#%chunk0;+#"ej 0;+#'__break .+#&__loop##run'".+#*_iterWhile##run'!1 < '! 2 '!3 ##run'  +#$true' 1 < '! 2 '!3 ##run'"< < +#$Bool-'"0;+#*__continue 5+#&tokens.+#&tokens#$with'!.+#%lexer#$next'!+#"ej  +#$true'     +#$null  3 #&failed'  0;+#(__return -'".+#(__return##run'!+#%false+#$null  3 #(finished'  0;+#(__return -'".+#(__return##run'!+#$true+#$null  3 #'results'  0;+#(__return -'".+#(__return##run'!+#&tokens+#$null  ' +#$null  ' .+#(__return##run'!+#)makeLexer+#$null  ' 1 ;+#-makeValueHole '! 2 '!3 ##run'!;+#%index  0;+#(__return -'".+#(__return##run'!.+#*__makeList##run'"+#%index..+#.makeMonteLexer#%holes' ##get'!*& +#$null  ' 1 ;+#/makePatternHole '! 2 '!3 ##run'!;+#%index  0;+#(__return -'".+#(__return##run'!.+#*__makeList##run'"+#%index..+#.makeMonteLexer#%holes' ##get'!*&"+#$null  ' /;+#.m__quasiParser  8-'"/;+#%super  .+#+makeLexerQP##run'$+#&makeQL.+#1makeChunkingLexer##run'!*##m``+#-makeValueHole+#/makePatternHole1#!A quasiparser for the Monte programming language.

     This object will parse any Monte expression and return an opaque
     value. In the near future, this object will instead return a translucent
     view into a Monte compiler and optimizer.;+#.m__quasiParser '! 2 ' '!4;+#&pair_1 .+#!M#,callWithPair'"+#%super+#&pair_11 ;+#$eval '! 2 '"3#µ!Evaluate a Monte source expression.

         The expression will be provided only the given environment. No other
         values will be passed in.##run'";+#&source+##Str;+#+environment  0;+#(__return -'".+#(__return##run'!..+#$eval#*evalToPair'"+#&source+#+environment##get'!*& +#$null  3 #*evalToPair'";+#&source+##Str;+#+environment  0;+#(__return -'"-'#/;+#&parser  .+#/makeMonteParser##run'!*#&<eval>.+#&parser#(feedMany'!+#&source9.+#&parser#&failed' .+#%throw##run'!.+#&parser#*getFailure' -'"/;+#&result  .+#&parser#$dump' .+#(__return##run'!.+#*typhonEval#*evalToPair'"+#&result+#+environment+#$null  ' .+#)__makeMap#)fromPairs'!.+#*__makeList##run'".+#*__makeList##run'"*#.m__quasiParser+#.m__quasiParser.+#*__makeList##run'"*#$eval+#$eval