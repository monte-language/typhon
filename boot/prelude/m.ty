-'41 ;+#%bench '!+#*DeepFrozen2 '!3 ##run'"< < '  -'"+#$null+#$null' /;+#%scope  .+#)safeScope#"or'!.+#)__makeMap#)fromPairs'!.+#*__makeList##run'!.+#*__makeList##run'"*#'&&bench,+#%bench' ' ' ' /?.+#+_mapExtract##run'!*#/makeMonteParser' >'";+#/makeMonteParser+#*DeepFrozen<   .+#&import#&script'"*#1lib/parsers/monte+#%scope' /?.+#+_mapExtract##run'!*#.makeMonteLexer' >'";+#.makeMonteLexer+#*DeepFrozen<   .+#&import#&script'"*#5lib/monte/monte_lexer+#%scope' /?.+#+_mapExtract##run'!*#/parseExpression' >'";+#/parseExpression+#*DeepFrozen<   .+#&import#&script'"*#6lib/monte/monte_parser+#%scope' /?.+#+_mapExtract##run'!*#&expand' >'";+#&expand+#*DeepFrozen<   .+#&import#&script'"*#8lib/monte/monte_expander+#%scope' /?.+#+_mapExtract##run'!*#(optimize' >'";+#(optimize+#*DeepFrozen<   .+#&import#&script'"*#9lib/monte/monte_optimizer+#%scope' />'";+#*VALUE_HOLE+#*DeepFrozen;+#,PATTERN_HOLE+#*DeepFrozen  .+#.makeMonteLexer#%holes' ' 1 ;+#'zipList '!+#*DeepFrozen2 '!3 ##run'";+#$left+#$List;+#%right+#$List'  0;+#(__return -'$9..+#+__equalizer#(sameEver'".+#$left#$size' ' .+#%right#$size' ' ' ##not' ' .+#%throw##run'!*#ACan't zip lists of unequal length'  /=+#!i  .*&"#&negate' ' .+#(__return##run'!1 ;+##zip '! 2 '"3 #-_makeIterator' '  0;+#(__return -'".+#(__return##run'!+##zip' +#$null  3 #$next'!;+#"ej '  0;+#(__return -'$5+#!i.+#!i##add'!*&"' 9.+#+__equalizer#(sameEver'"+#!i.+#$left#$size' ' ' .+#%throw#%eject'"+#"ej+#$null'  .+#(__return##run'!.+#*__makeList##run'"+#!i.+#*__makeList##run'".+#$left##get'!+#!i' .+#%right##get'!+#!i' ' ' ' +#$null  ' ' +#$null  ' 1 ;+#7makeQuasiAstTransformer '!+#*DeepFrozen2 '!3 ##run'!;+#&values '  0;+#(__return -'".+#(__return##run'!1 ;+#4monteQAstTransformer '! 2 '!3 ##run'$;+#$node ;+#%maker ;+#$args ;+#$span '  0;+#(__return -'".+#(__return##run'!8-'"/;+#*specimen_1  .+#$node#+getNodeName' ' 0;+#$ej_2 -'"/?.+#*_matchSame##run'!*#-ValueHoleExpr' < +#$ej_2+#*specimen_1.+#&values##get'!.+#$node#(getIndex' ' ' ;+#)failure_3 0;+#$ej_4 -'"/?.+#*_matchSame##run'!*#0ValueHolePattern' < +#$ej_4+#*specimen_1.+#&values##get'!.+#$node#(getIndex' ' ' ;+#)failure_5 0;+#$ej_6 -'"/?.+#*_matchSame##run'!*#/PatternHoleExpr' < +#$ej_6+#*specimen_1.+#%throw##run'!*#EPattern-holes not allowed in QL exprs' ;+#)failure_7 0;+#$ej_8 -'"/?.+#*_matchSame##run'!*#2PatternHolePattern' < +#$ej_8+#*specimen_1.+#%throw##run'!*#EPattern-holes not allowed in QL exprs' ;+#)failure_9 0;+#%ej_10 -'"/< +#%ej_10+#*specimen_1.+#!M#$call'$+#%maker*##run.+#$args##add'!.+#*__makeList##run'!+#$span' ' ..+#*__makeList##run' ' #%asMap' ' ' ;+#*failure_11 .+#-_switchFailed##run'&+#*specimen_1+#)failure_3+#)failure_5+#)failure_7+#)failure_9+#*failure_11' ' +#$null  ' ' +#$null  ' /;+##Ast+#*DeepFrozen .+#*astBuilder#+getAstGuard' ' /;+#'Pattern+#*DeepFrozen .+#*astBuilder#/getPatternGuard' ' /;+#$Expr+#*DeepFrozen .+#*astBuilder#,getExprGuard' ' /;+#+NamePattern+#*DeepFrozen .+#*astBuilder#3getNamePatternGuard' ' /;+#$Noun+#*DeepFrozen .+#*astBuilder#,getNounGuard' ' 1 ;+#%makeM '!+#*DeepFrozen2 '!3 ##run'";+##ast ;+#(isKernel+#$Bool'  0;+#(__return -'".+#(__return##run'!/;+#!m  8-'"/@+#%super ,+##ast1#ZAn abstract syntax tree in the Monte programming language.;+#!m '! 2 '&3 #(_printOn'!;+##out '  -'$.+##out#%print'!*#"m`' .+##ast#(_printOn'!+##out' .+##out#%print'!*#!`' +#$null3 #*_conformTo'!;+#%guard '  0;+#(__return -'"9..+#*__makeList##run'%+##Ast+#'Pattern+#$Expr+#$Noun+#+NamePattern' #(contains'!+#%guard' .+#(__return##run'!+##ast'  +#$null  3 #*substitute'!;+#&values '  0;+#(__return -'".+#(__return##run'!.+#%makeM##run'".+##ast#)transform'!.+#7makeQuasiAstTransformer##run'!+#&values' ' +#%false' ' +#$null  3#ô!Walk over the pattern AST and the specimen comparing each node.
            Value holes in the pattern are substituted before comparison.
            Pattern holes are used to collect nodes to return for binding.#)matchBind'#;+#&values ;+#(specimen+##Ast;+#"ej '  0;+#(__return -'%/;+#-nextNodePairs  ..+#*__makeList##run'!.+#*__makeList##run'"+##ast+#(specimen' ' #'diverge' ' /;+#'results  ...+#*__makeList##run' ' #%asMap' ' #'diverge' ' .+#&__loop##run'".+#*_iterWhile##run'!1 < '! 2 '!3 ##run' '  ..+#+__equalizer#(sameEver'".+#-nextNodePairs#$size' ' *& ' ##not' ' ' ' 1 < '! 2 '!3 ##run'"< < ' +#$Bool-'"0;+#*__continue -'(/>'"=+#+patternNode ;+#,specimenNode   .+#-nextNodePairs##pop' ' 9..+#+patternNode#+getNodeName' ' #*startsWith'!*#)ValueHole' 5+#+patternNode.+#&values##get'!.+#+patternNode#(getIndex' ' '  9..+#+patternNode#+getNodeName' ' #*startsWith'!*#+PatternHole' -'#.+#'results##put'".+#+patternNode#(getIndex' ' /;+#'ares_12  +#,specimenNode' +#'ares_12.+#*__continue##run' '  9..+#+__equalizer#(sameEver'".+#+patternNode#+getNodeName' ' .+#,specimenNode#+getNodeName' ' ' ##not' ' .+#%throw#%eject'"+#"ej...*#!<##add'!.+#+patternNode#+getNodeName' ' ' ##add'!*#&> != <' ##add'!.+#,specimenNode#+getNodeName' ' ' '  /;+#(argPairs  .+#'zipList##run'"..+#+patternNode#'_uncall' ' ##get'!*&$' ..+#,specimenNode#'_uncall' ' ##get'!*&$' ' /=+#,validFlag_13  +#$true6.+#&__loop##run'"+#(argPairs1#-For-loop body< '! 2 '!3 ##run'";+#&key_14 ;+#(value_15 '  -'%.+#,_validateFor##run'!+#,validFlag_13' /<  +#&key_14/>'";+#'pattArg ;+#'specArg   +#(value_159-'#/;+#%sp_16  +#'pattArg/>'!;+#%ok_17   0;+#'fail_18 -'"/<+##Ast+#'fail_18+#%sp_16.+#*__makeList##run'!+#$true' ;+#*problem_19 -'"/?+#/__slotToBinding@+#)broken_20 .+##Ref#&broken'!+#*problem_19' .+#*__makeList##run'!+#%false' +#%ok_179-'#/;+#%sp_21  +#'specArg/>'!;+#%ok_22   0;+#'fail_23 -'"/<+##Ast+#'fail_23+#%sp_21.+#*__makeList##run'!+#$true' ;+#*problem_24 -'"/?+#/__slotToBinding@+#)broken_25 .+##Ref#&broken'!+#*problem_24' .+#*__makeList##run'!+#%false' +#%ok_22.+#-nextNodePairs#$push'!.+#*__makeList##run'"+#'pattArg+#'specArg' ' .+#%throw#%eject'"+#"ej.....*#)Expected ##add'!.+#'pattArg#+getNodeName' ' ' ##add'!*#! ' ##add'!.+#!M#'toQuote'!+#'pattArg' ' ##add'!*#&, not ' ##add'!.+#!M#'toQuote'!+#'specArg' ' ' 9-'#/;+#%sp_26  +#'pattArg/>'!;+#%ok_27   0;+#'fail_28 -'"/<+#$List+#'fail_28+#%sp_26.+#*__makeList##run'!+#$true' ;+#*problem_29 -'"/?+#/__slotToBinding@+#)broken_30 .+##Ref#&broken'!+#*problem_29' .+#*__makeList##run'!+#%false' +#%ok_27-'#9.-'#/;+#%sp_31  +#'specArg/>'!;+#%ok_32   0;+#'fail_33 -'"/<+#$List+#'fail_33+#%sp_31.+#*__makeList##run'!+#$true' ;+#*problem_34 -'"/?+#/__slotToBinding@+#)broken_35 .+##Ref#&broken'!+#*problem_34' .+#*__makeList##run'!+#%false' +#%ok_32##not' ' .+#%throw#%eject'"+#"ej.*#3Expected list, not ##add'!.+#!M#(toString'!+#'specArg' ' '  9..+#+__equalizer#(sameEver'".+#'pattArg#$size' ' .+#'specArg#$size' ' ' ##not' ' .+#%throw#%eject'"+#"ej...*#4List size mismatch: ##add'!.+#!M#(toString'!+#'pattArg' ' ##add'!*#$ !~ ' ##add'!.+#!M#(toString'!+#'specArg' ' '  .+#-nextNodePairs#&extend'!.+#'zipList##run'"+#'pattArg+#'specArg' ' 9..+#+__equalizer#(sameEver'"+#'pattArg+#'specArg' ##not' ' .+#%throw#%eject'"+#"ej...*#)Expected ##add'!.+#!M#'toQuote'!+#'pattArg' ' ##add'!*#&, not ' ##add'!.+#!M#'toQuote'!+#'specArg' ' '  +#$null' ' 5+#,validFlag_13+#%false+#$null  +#$true' ' .+#(__return##run'!-'"/=+#,validFlag_36  +#$true6.+#/_accumulateList##run'"..+#'results#(sortKeys' ' #)getValues' ' 1#-For-loop body< '! 2 '!3 ##run'#;+#&key_37 ;+#(value_38 < '  -'$.+#,_validateFor##run'!+#,validFlag_36' /<  +#&key_37/;+#$node  +#(value_38.+#%makeM##run'"+#$node+#%false' ' ' 5+#,validFlag_36+#%false' +#$null  3#VDesugar all non-Kernel-Monte syntax into Kernel-Monte.#&expand' '  0;+#(__return -'#9+#(isKernel.+#(__return##run'!+#!m'  0;+#"ej .+#(__return##run'!.+#%makeM##run'".+#&expand##run'#+##ast+#*astBuilder+#"ej' +#$true' ' ;+#%error .+#%throw##run'!..+#3simple__quasiParser#*valueMaker'!.+#*__makeList##run'#*#ACouldn't expand to Kernel-Monte: .+#3simple__quasiParser#)valueHole'!*& ' *# ' ' #*substitute'!.+#*__makeList##run'!+#%error' ' ' +#$null  3#CAggressively optimize Kernel-Monte.##mix' '  0;+#(__return -'#9.+#(isKernel##not' ' .+#%throw##run'!..+#3simple__quasiParser#*valueMaker'!.+#*__makeList##run'!*#=Can't optimize unexpanded AST' ' #*substitute'!.+#*__makeList##run' ' ' '  .+#(__return##run'!.+#%makeM##run'".+#(optimize##run'!+##ast' +#$true' ' +#$null  '!4;+#'pair_40 .+#!M#/callWithMessage'"+#%super+#'pair_40' ' +#$null  ' 1 ;+#3makeQuasiTokenChain '!+#*DeepFrozen2 '!3 ##run'!;+#(template '  0;+#(__return -''/=+#!i  .*&"#&negate' ' /=+#'current  .+#.makeMonteLexer##run'"*# *##m``' /=+##lex  +#'current/=+#!j  *& /;+#(counters  ..+#)__makeMap#)fromPairs'!.+#*__makeList##run'".+#*__makeList##run'"+#*VALUE_HOLE.*&"#&negate' ' ' .+#*__makeList##run'"+#,PATTERN_HOLE.*&"#&negate' ' ' ' ' #'diverge' ' .+#(__return##run'!1 ;+#'chainer '! 2 '%3 #-_makeIterator' '  0;+#(__return -'".+#(__return##run'!+#'chainer' +#$null  3 #)valueHole' '  0;+#(__return -'".+#(__return##run'!+#*VALUE_HOLE' +#$null  3 #+patternHole' '  0;+#(__return -'".+#(__return##run'!+#,PATTERN_HOLE' +#$null  3 #.getSyntaxError' '  0;+#(__return -'".+#(__return##run'!.+#'current#.getSyntaxError' ' ' +#$null  3 #$next'!;+#"ej '  0;+#(__return -'%9.+#)_comparer##geq'"+#!i.+#(template#$size' ' ' .+#%throw#%eject'"+#"ej+#$null'  5+#!j.+#!j##add'!*&"' 9.+#+__equalizer#(sameEver'"+#'current+#$null' 9.+#+__equalizer#(sameEver'".+#(template##get'!+#!i' +#*VALUE_HOLE' -'#/;+##hol  .+#(template##get'!+#!i' 5+#!i.+#!i##add'!*&"' .+#(__return##run'!.+#*__makeList##run'"+#!j.+#*__makeList##run'#+##hol-'$/;+#(recip_41  +#(counters/;+#&arg_42  +##hol.+#(recip_41##put'"+#&arg_42/;+#'ares_43  ..+#(recip_41##get'!+#&arg_42' ##add'!*&"' ' +#'ares_43+#$null' ' ' 9.+#+__equalizer#(sameEver'".+#(template##get'!+#!i' +#,PATTERN_HOLE' -'#/;+##hol  .+#(template##get'!+#!i' 5+#!i.+#!i##add'!*&"' .+#(__return##run'!.+#*__makeList##run'"+#!j.+#*__makeList##run'#+##hol-'$/;+#(recip_44  +#(counters/;+#&arg_45  +##hol.+#(recip_44##put'"+#&arg_45/;+#'ares_46  ..+#(recip_44##get'!+#&arg_45' ##add'!*&"' ' +#'ares_46+#$null' ' ' -'"5+#'current..+##lex#1lexerForNextChunk'!.+#(template##get'!+#!i' ' #-_makeIterator' ' 5+##lex+#'current 0;+#!e -'"/;+#!t  ..+#'current#$next'!+#!e' ##get'!*&"' .+#(__return##run'!.+#*__makeList##run'"+#!j+#!t' ' < -'#5+#!i.+#!i##add'!*&"' 5+#'current+#$null.+#(__return##run'!.+#'chainer#$next'!+#"ej' ' +#$null  ' ' +#$null  ' 1#!A quasiparser for the Monte programming language.

     This object will parse any Monte expression and return an opaque
     value. In the near future, this object will instead return a translucent
     view into a Monte compiler and optimizer.;+#.m__quasiParser '!+#*DeepFrozen2 '%3 #-getAstBuilder' '  0;+#(__return -'".+#(__return##run'!+#*astBuilder' +#$null  3 #)valueHole'!< '  0;+#(__return -'".+#(__return##run'!+#*VALUE_HOLE' +#$null  3 #+patternHole'!< '  0;+#(__return -'".+#(__return##run'!+#,PATTERN_HOLE' +#$null  3 #*valueMaker'!;+#(template '  0;+#(__return -'$/;+#%chain  .+#3makeQuasiTokenChain##run'!+#(template' /;+#$qast  .+#/parseExpression##run'#+#%chain+#*astBuilder+#%throw' .+#(__return##run'!.+#%makeM##run'"+#$qast+#%false' ' +#$null  3 #*matchMaker'!;+#(template '  0;+#(__return -'$/;+#%chain  .+#3makeQuasiTokenChain##run'!+#(template' /;+#$qast  .+#/parseExpression##run'#+#%chain+#*astBuilder+#%throw' .+#(__return##run'!.+#%makeM##run'"+#$qast+#%false' ' +#$null  ' 1 ;+#$eval '!+#*DeepFrozen2 '"3#µ!Evaluate a Monte source expression.

         The expression will be provided only the given environment. No other
         values will be passed in.##run'";+#&source+##Str;+#+environment '  0;+#(__return -'".+#(__return##run'!..+#$eval#*evalToPair'"+#&source+#+environment' ##get'!*& ' ' +#$null  3 #*evalToPair'";+#&source+##Str;+#+environment '  0;+#(__return -'$/;+#&parser  .+#/makeMonteParser##run'!*#&<eval>' .+#&parser#(feedMany'!+#&source' 9.+#&parser#&failed' ' .+#%throw##run'!.+#&parser#*getFailure' ' ' -'"/;+#&result  .+#&parser#$dump' ' .+#(__return##run'!.+#*typhonEval#*evalToPair'"+#&result+#+environment' ' +#$null  ' .+#)__makeMap#)fromPairs'!.+#*__makeList##run'".+#*__makeList##run'"*#.m__quasiParser+#.m__quasiParser' .+#*__makeList##run'"*#$eval+#$eval' ' ' 