-'%/;+#)charSpace+#*DeepFrozen .+#1OrderedSpaceMaker##run'"+#$Char*#$Char' /;+#(intSpace+#*DeepFrozen .+#1OrderedSpaceMaker##run'"+##Int*##Int' /;+#+doubleSpace+#*DeepFrozen .+#1OrderedSpaceMaker##run'"+#&Double*#&Double' /;+#1_makeOrderedSpace+#*DeepFrozen 8-'"/@+#%super ,+#1OrderedSpaceMaker1#®!Maker of ordered vector spaces.

     This object implements several Monte operators, including those which
     provide ordered space syntax.;+#1_makeOrderedSpace '!+#*DeepFrozen2 '#3#Ý!Return the ordered space corresponding to a given value.

         The correspondence is obtained via Miranda _getAllegedType(), with
         special cases for `Char`, `Double`, and `Int`.#,spaceOfValue'!;+#%value '  0;+#(__return -'"9-'#/;+#$sp_1  +#%value/>'";+#$ok_2 @+#!i  0;+#&fail_3 -'"/;+#!i+##Int+#&fail_3+#$sp_1.+#*__makeList##run'"+#$true,+#!i' ;+#)problem_4 -'"/?+#/__slotToBinding@+#(broken_5 .+##Ref#&broken'!+#)problem_4' .+#*__makeList##run'"+#%false,+#(broken_5' +#$ok_2.+#(__return##run'!+#(intSpace' 9-'#/;+#$sp_6  +#%value/>'";+#$ok_7 @+#!d  0;+#&fail_8 -'"/;+#!d+#&Double+#&fail_8+#$sp_6.+#*__makeList##run'"+#$true,+#!d' ;+#)problem_9 -'"/?+#/__slotToBinding@+#)broken_10 .+##Ref#&broken'!+#)problem_9' .+#*__makeList##run'"+#%false,+#)broken_10' +#$ok_7.+#(__return##run'!+#+doubleSpace' 9-'#/;+#%sp_11  +#%value/>'";+#%ok_12 @+#!c  0;+#'fail_13 -'"/;+#!c+#$Char+#'fail_13+#%sp_11.+#*__makeList##run'"+#$true,+#!c' ;+#*problem_14 -'"/?+#/__slotToBinding@+#)broken_15 .+##Ref#&broken'!+#*problem_14' .+#*__makeList##run'"+#%false,+#)broken_15' +#%ok_12.+#(__return##run'!+#)charSpace' -'"/;+#$type  .+#%value#/_getAllegedType' ' .+#(__return##run'!.+#1OrderedSpaceMaker##run'"+#$type.+#!M#'toQuote'!+#$type' ' ' +#$null  3#È!The operator `start`..!`bound`.

         This is equivalent to (space â‰¥ `start`) âˆª (space < `bound`) for the
         ordered space containing `start` and `bound`.#(op__till'";+#%start ;+#%bound '  0;+#(__return -'"-'"/;+#%space  .+#1_makeOrderedSpace#,spaceOfValue'!+#%start' .+#(__return##run'!..+#)_comparer##geq'"+#%space+#%start' ##and'!.+#)_comparer#(lessThan'"+#%space+#%bound' ' ' +#$null  3#É!The operator `start`..`bound`.

         This is equivalent to (space â‰¥ `start`) âˆª (space â‰¤ `bound`) for the
         ordered space containing `start` and `bound`.#(op__thru'";+#%start ;+#$stop '  0;+#(__return -'"-'"/;+#%space  .+#1_makeOrderedSpace#,spaceOfValue'!+#%start' .+#(__return##run'!..+#)_comparer##geq'"+#%space+#%start' ##and'!.+#)_comparer##leq'"+#%space+#$stop' ' ' +#$null  '!4;+#'pair_16 .+#!M#/callWithMessage'"+#%super+#'pair_16' .+#)__makeMap#)fromPairs'!.+#*__makeList##run'$.+#*__makeList##run'"*#$Char+#)charSpace' .+#*__makeList##run'"*##Int+#(intSpace' .+#*__makeList##run'"*#&Double+#+doubleSpace' .+#*__makeList##run'"*#1_makeOrderedSpace+#1_makeOrderedSpace' ' ' 